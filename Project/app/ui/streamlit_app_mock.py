# app/ui/streamlit_app_mock.py
import streamlit as st
import os
import time
import uuid
from typing import Dict, Any, List, Optional

# Set page configuration
st.set_page_config(
    page_title="Document Intelligence RAG Chatbot (Mock)",
    page_icon="ðŸ“„",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Mock API functions
def mock_upload_document(file):
    """Mock document upload function"""
    # Simulate processing delay
    time.sleep(2)
    return {
        "status": "success",
        "message": "Document embedded successfully.",
        "document_id": str(uuid.uuid4())
    }

def mock_query_document(query: str, document_id: str, conversation_id: Optional[str] = None, require_citations: bool = True):
    """Mock query function"""
    # Simulate processing delay
    time.sleep(2)
    
    # Generate a mock response
    answer = f"This is a mock answer to your question: '{query}'. In a real scenario, this would be generated by the LLM based on document content."
    
    # Mock citations
    citations = []
    if require_citations:
        citations = [
            {
                "page": 1,
                "document_name": "Mock Document"
            }
        ]
    
    # Generate conversation ID if needed
    if not conversation_id:
        conversation_id = str(uuid.uuid4())
    
    return {
        "status": "success",
        "response": {
            "answer": answer,
            "citations": citations
        },
        "conversation_id": conversation_id
    }

# Main application
def main():
    # Custom CSS
    st.markdown("""
    <style>
    .main-header {
        font-size: 2.5rem;
        color: #1E88E5;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #0D47A1;
        margin-bottom: 1rem;
    }
    .chat-message {
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        border: 1px solid #E0E0E0;
    }
    .user-message {
        background-color: #E3F2FD;
    }
    .assistant-message {
        background-color: #F5F5F5;
    }
    .citation {
        background-color: #FFF8E1;
        padding: 0.5rem;
        border-radius: 0.3rem;
        font-size: 0.8rem;
        margin-top: 0.5rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Application header
    st.markdown("<h1 class='main-header'>Document Intelligence RAG Chatbot (Mock Mode)</h1>", unsafe_allow_html=True)
    st.markdown("Upload documents and ask questions to get mock responses. This is a demo without a backend API connection.")
    
    # Sidebar for document upload and management
    with st.sidebar:
        st.markdown("<h2 class='sub-header'>Document Management</h2>", unsafe_allow_html=True)
        
        st.subheader("Upload Document")
        uploaded_file = st.file_uploader("Choose a document", type=["pdf", "docx", "txt"])
        
        if uploaded_file is not None:
            if st.button("Process Document"):
                with st.spinner("Processing document..."):
                    # Use mock upload function
                    result = mock_upload_document(uploaded_file)
                    
                    if result.get("status") == "success":
                        st.success(f"Document processed successfully!")
                        st.session_state.document_id = result.get("document_id")
                        st.session_state.document_name = uploaded_file.name
                        st.session_state.messages = []
                        st.session_state.conversation_id = None
                    else:
                        st.error(f"Error processing document: {result.get('error_details', 'Unknown error')}")
        
        if hasattr(st.session_state, 'document_id'):
            st.subheader("Current Document")
            st.info(f"Document: {st.session_state.document_name}\nID: {st.session_state.document_id}")
            
            if st.button("Clear Document"):
                if hasattr(st.session_state, 'document_id'):
                    del st.session_state.document_id
                    del st.session_state.document_name
                    st.session_state.messages = []
                    st.session_state.conversation_id = None
                    st.rerun()
        
        st.subheader("Settings")
        require_citations = st.checkbox("Require Citations", value=True)
    
    # Chat interface
    if hasattr(st.session_state, 'document_id'):
        if 'messages' not in st.session_state:
            st.session_state.messages = []
        
        if 'conversation_id' not in st.session_state:
            st.session_state.conversation_id = None
        
        if st.session_state.messages:
            st.markdown("<h2 class='sub-header'>Conversation</h2>", unsafe_allow_html=True)
            
            for message in st.session_state.messages:
                if message["role"] == "user":
                    st.markdown(f"<div class='chat-message user-message'><strong>You:</strong> {message['content']}</div>", unsafe_allow_html=True)
                else:
                    response_text = message["content"]
                    citations_html = ""
                    
                    if "citations" in message and message["citations"]:
                        citations_html = "<div class='citation'><strong>Citations:</strong><ul>"
                        for citation in message["citations"]:
                            citations_html += f"<li>{citation['document_name']}, Page {citation['page']}</li>"
                        citations_html += "</ul></div>"
                    
                    st.markdown(f"<div class='chat-message assistant-message'><strong>Assistant:</strong> {response_text}{citations_html}</div>", unsafe_allow_html=True)
        
        st.markdown("<h2 class='sub-header'>Ask a Question</h2>", unsafe_allow_html=True)
        query = st.text_input("Type your question about the document:")
        
        if st.button("Submit") and query:
            st.session_state.messages.append({"role": "user", "content": query})
            
            response_placeholder = st.empty()
            response_placeholder.markdown("<div class='chat-message assistant-message'><strong>Assistant:</strong> Thinking...</div>", unsafe_allow_html=True)
            
            # Use mock query function
            result = mock_query_document(
                query=query, 
                document_id=st.session_state.document_id,
                conversation_id=st.session_state.conversation_id,
                require_citations=require_citations
            )
            
            if result.get("status") == "success":
                st.session_state.conversation_id = result.get("conversation_id")
                
                response = result.get("response", {})
                answer = response.get("answer", "")
                citations = response.get("citations", [])
                
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": answer,
                    "citations": citations
                })
                
                response_placeholder.empty()
                st.rerun()
            else:
                error_message = result.get("error_details", "Unknown error")
                response_placeholder.markdown(f"<div class='chat-message assistant-message'><strong>Assistant:</strong> Error: {error_message}</div>", unsafe_allow_html=True)
    else:
        st.info("Please upload a document to start the conversation.")
        
        # Demo information
        st.markdown("<h2 class='sub-header'>How It Works</h2>", unsafe_allow_html=True)
        st.markdown("""
        1. **Upload a Document**: Upload a PDF, DOCX, or TXT file from the sidebar.
        2. **Process the Document**: The system will extract text, split it into chunks, and generate embeddings.
        3. **Ask Questions**: Ask questions about the document content.
        4. **Get Contextual Answers**: The system retrieves relevant information from the document and generates accurate responses with citations.
        """)
        
        st.markdown("<h2 class='sub-header'>Supported Features</h2>", unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Document Formats:**")
            st.markdown("- PDF (including scanned documents)")
            st.markdown("- Microsoft Word (DOCX)")
            st.markdown("- Text Files (TXT)")
        
        with col2:
            st.markdown("**Capabilities:**")
            st.markdown("- OCR for scanned documents")
            st.markdown("- Accurate contextual responses")
            st.markdown("- Citations for sources")
            st.markdown("- Conversation history")

if __name__ == "__main__":
    main()